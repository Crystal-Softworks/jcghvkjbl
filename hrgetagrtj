print(1)

task.wait(3)

local Services = {
	Log = game:GetService("LogService"),
	Http = game:GetService("HttpService"),
	Teleport = game:GetService("TeleportService"),
	Players = game:GetService("Players"),
}

local Player = Services.Players.LocalPlayer
local PlaceId = game.PlaceId
local JobId = game.JobId
local JoinURL = "https://www.roblox.com/games/start?placeId=16302670534&launchData=85896571713843/" .. JobId

local Webhooks = {
	Default = "https://discord.com/api/webhooks/1361926749356691547/YiGiPFdq_k9fEEVptt0PIciJPLqGjD8_UUXsqFhIR7zfZrcCRvlp1QbuIytNE-5LOJSW",
	Chest = "https://discord.com/api/webhooks/1361926856441466950/EFKBeRwMwtDm5Y5Fm7Zgfrh-kFAX3IracPET8aBijwInfOxnGAbhbZtDkokVbGEW4C_u",
	Egg = {
		Nightmare = "https://discord.com/api/webhooks/1361926954646765660/draAau64eRUoiT_16qvhIzPls5_u-U_bA_Z4frf9fVToGARjhe_faxuAHUlF2O7hDlsw",
		Rainbow = "https://discord.com/api/webhooks/1361926494779343069/MG6gU1bxiO0adDU36dhg05E7a6cr8Un1K9ihlDJ_oQKVPq7JOGvWe78AyGJ3yUjQsWC9",
		Spikey = "https://discord.com/api/webhooks/1361927126500118528/qiJVKrxTBdhJV1jret38z7Gxr5gAYFwPdZNC9mSI-1uv2q2l0EGzWpnZGCA0OdQbNEXd",
		Lunar = "https://discord.com/api/webhooks/1361927284298223617/UJMPnPGnvyYX1qScyqi9GmekO7EPGIee5ozdD8_xRjGb74iegpjHSODyjdp2buyOMyzc",
		Void = "https://discord.com/api/webhooks/1361927286320005181/QiLVY_4A4OMRRNKmQB4__2PxXhok37xgObmci79Xktt1hJyTA7YNF4OrhBNs4l85VIyp",
	},
	Unknown = "https://discord.com/api/webhooks/1361927608593416243/4FSfb9hkfk1zF8m9sH9LGroFGZ0o3fJgsqVEzg8rptRwLuMoQLw8iMapFBjOqoeSjsFi",
	Luck25 = "https://discord.com/api/webhooks/1361938851727409305/xHcD8GPHUbQ8YtMW6fzkCi3M8QDAVcs-_LU10DOaKi8dl81A75_b8p_UBiU-fJY0zfAq",
	Aura = "https://discord.com/api/webhooks/1361929702272401508/SpiV0Oj4fbDj2U4qU8T0fI7d6NxdTYXrtt6svyb4mT3Un9p8bGK9I5GIpfTjw0YaRh2V"
}

local PingRole = "<@&1361933113764089866>"

local function sendWebhook(url, data)
	pcall(function()
		request({
			Url = url,
			Method = "POST",
			Headers = { ["Content-Type"] = "application/json" },
			Body = Services.Http:JSONEncode(data)
		})
	end)
end

local function getAvailableServer()
	local servers = {}
    local req = request({Url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true", PlaceId)})
    local body = Services.Http:JSONDecode(req.Body)

    -- for i,v in next, body.data do
    --     for i,v in next, v do
    --         print(i,v)
    --     end
    -- end

    if body and body.data then
        for i, v in next, body.data do
            if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= JobId then
                table.insert(servers, 1, v.id)
                print(v.id)
            end
        end
    end

    return servers[math.random(1, #servers)]
end

local function teleportToNewServer()
    print("new tp")
	local sid = getAvailableServer()
	if sid then
	    print("tp")
		Services.Teleport:TeleportToPlaceInstance(PlaceId, sid, Player)
	end
end

repeat task.wait() until workspace:FindFirstChild("Rendered") and workspace.Rendered:FindFirstChild("Rifts")
print(2)
for _, rift in ipairs(workspace.Rendered.Rifts:GetChildren()) do
	if rift:IsA("Model") and not rift:GetAttribute("AlreadyReported") then
	    print("isAlreadyReported")
		local display = rift:FindFirstChild("Display")
		local gui = display and display:FindFirstChild("SurfaceGui")
		local icon = gui and gui:FindFirstChild("Icon")
		local luckLabel = icon and icon:FindFirstChild("Luck")
		local timerLabel = gui and gui:FindFirstChild("Timer")

		local name = rift.Name
		local lower = string.lower(name)
		local luck = luckLabel and luckLabel:IsA("TextLabel") and luckLabel.Text
		local timer = timerLabel and timerLabel:IsA("TextLabel") and timerLabel.Text
		local height = tostring(math.floor(display.Position.Y)) .. "m"
		local slots = #Services.Players:GetPlayers() .. " / 12"
		local join = "[Join Server](" .. JoinURL .. ")"
		local now = "<t:" .. tostring(os.time()) .. ":f>"

		local webhook, color, title, ping = Webhooks.Default, nil, name, false

		if string.find(lower, "aura") then
			sendWebhook(Webhooks.Aura, { embeds = {{ title = "!!!!!!!!!! AURA ISLAND HAS APPEARED", color = 10181046 }} })
		elseif lower == "golden-chest" then
			webhook, color, title = Webhooks.Chest, 16776960, "Golden Chest <:GoldenChest:1361925495305801778>"
		elseif lower == "nightmare-egg" then
			webhook, color, title = Webhooks.Egg.Nightmare, 16711680, "Nightmare Egg <:NightmareEgg:1361924756755976254>"
		elseif lower == "rainbow-egg" then
			webhook, color, title = Webhooks.Egg.Rainbow, 16761035, "Rainbow Egg <:RainbowEgg:1361925537886376006>"
		elseif lower == "spikey-egg" then
			webhook, color, title = Webhooks.Egg.Spikey, 8355711, "Spikey Egg <:SpikeyEgg:1361925568916099113>"
		elseif lower == "lunar-egg" then
			webhook, color, title = Webhooks.Egg.Lunar, 3447003, "Lunar Egg <:LunarEgg:1361925601572946151>"
		elseif lower == "void-egg" then
			webhook, color, title = Webhooks.Egg.Void, 2899536, "Void Egg <:VoidEgg:1361883312515448962>"
		elseif lower == "royal-chest" then
			color, title, ping = 16744716, "Royal Chest <:RoyalChest:1361925818590298143>", true
		elseif string.find(lower, "chest") then
			webhook = Webhooks.Chest
		else
			webhook = Webhooks.Unknown
		end

		if color then
			local fields = {
				luck and { name = "Luck", value = "`" .. luck .. "`", inline = true } or nil,
				{ name = "Height", value = "`" .. height .. "`", inline = true },
				{ name = "Server Slots", value = "`" .. slots .. "`", inline = true },
				timer and { name = "Timer", value = "`" .. timer .. "`", inline = true } or nil,
				{ name = "Teleport Script", value = "```lua\ngame:GetService(\"TeleportService\"):TeleportToPlaceInstance(\"" .. PlaceId .. "\", \"" .. JobId .. "\", game.Players.LocalPlayer)\n```" },
				{ name = string.char(226,128,139), value = join },
				{ name = "Server ID", value = "`" .. JobId .. "`" },
				{ name = "Checked At", value = now }
			}

			sendWebhook(webhook, {
				content = ping and PingRole or nil,
				embeds = {{ title = title, color = color, fields = fields }}
			})

			if luck and string.find(luck, "x25") then
				sendWebhook(Webhooks.Luck25, {
					content = ping and PingRole or nil,
					embeds = {{ title = title, color = color, fields = fields }}
				})
			end
		end

		rift:SetAttribute("AlreadyReported", true)
	end

	print(3)
end

-- Player.OnTeleport:Connect(function()
-- 	local code = string.format("game:GetService('TeleportService'):TeleportToPlaceInstance(%d, '%s', game.Players.LocalPlayer)", PlaceId, JobId)
-- 	if queue_on_teleport then queue_on_teleport(code) end
-- end)
print(4)
Services.Log.MessageOut:Connect(function(_, msgType)
	if msgType == Enum.MessageType.MessageError then
		teleportToNewServer()
	end
end)
print(5)

task.delay(10, teleportToNewServer)
print(6)
